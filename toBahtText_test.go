package toBahtText

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

type testCase struct {
	name     string
	input    string
	expected string
}

var testCases = []testCase{
	{
		name:     "20 ยี่สิบ",
		input:    "20",
		expected: "ยี่สิบ",
	},
	{
		name:     "2000001 สองล้านหนึ่ง",
		input:    "2000001",
		expected: "สองล้านหนึ่ง",
	},
	{
		name:     "20000000 ยี่สิบล้าน",
		input:    "20000000",
		expected: "ยี่สิบล้าน",
	},
	{
		name:     "20000001 ยี่สิบล้านหนึ่ง",
		input:    "20000001",
		expected: "ยี่สิบล้านหนึ่ง",
	},
	{
		name:     "200000000 สองร้อยล้าน",
		input:    "200000000",
		expected: "สองร้อยล้าน",
	},
	{
		name:     "200000001 สองร้อยล้านหนึ่ง",
		input:    "200000001",
		expected: "สองร้อยล้านหนึ่ง",
	},
	{
		name:     "200000021 สองร้อยล้านยี่สิบเอ็ด",
		input:    "200000021",
		expected: "สองร้อยล้านยี่สิบเอ็ด",
	},
	{
		name:     "1000000000000 หนึ่งล้านล้าน",
		input:    "1000000000000",
		expected: "หนึ่งล้านล้าน",
	},
	{
		name:     "10000000000000 สิบล้านล้าน",
		input:    "10000000000000",
		expected: "สิบล้านล้าน",
	},
	{
		name:     "123123123123123123123123 หนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสาม",
		input:    "123123123123123123123123",
		expected: "หนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสาม",
	},
	{
		name:     "1234567891 หนึ่งพันสองร้อยสามสิบสี่ล้านห้าแสนหกหมื่นเจ็ดพันแปดร้อยเก้าสิบเอ็ด",
		input:    "1234567891",
		expected: "หนึ่งพันสองร้อยสามสิบสี่ล้านห้าแสนหกหมื่นเจ็ดพันแปดร้อยเก้าสิบเอ็ด",
	},
	{
		name:     "10000 หนึ่งหมื่น",
		input:    "10000",
		expected: "หนึ่งหมื่น",
	},
	{
		name:     "19283 หนึ่งหมื่นเก้าพันสองร้อยแปดสิบสาม",
		input:    "19283",
		expected: "หนึ่งหมื่นเก้าพันสองร้อยแปดสิบสาม",
	},
	{
		name:     "1050123 หนึ่งล้านห้าหมื่นหนึ่งร้อยยี่สิบสาม",
		input:    "1050123",
		expected: "หนึ่งล้านห้าหมื่นหนึ่งร้อยยี่สิบสาม",
	},
	{
		name:     "1111111 หนึ่งล้านหนึ่งแสนหนึ่งหมื่นหนึ่งพันหนึ่งร้อยสิบเอ็ด",
		input:    "1111111",
		expected: "หนึ่งล้านหนึ่งแสนหนึ่งหมื่นหนึ่งพันหนึ่งร้อยสิบเอ็ด",
	},
	{
		name:     "22222222 ยี่สิบสองล้านสองแสนสองหมื่นสองพันสองร้อยยี่สิบสอง",
		input:    "22222222",
		expected: "ยี่สิบสองล้านสองแสนสองหมื่นสองพันสองร้อยยี่สิบสอง",
	},
	{
		name:     "123123123123 หนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสาม",
		input:    "123123123123",
		expected: "หนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสามล้านหนึ่งแสนสองหมื่นสามพันหนึ่งร้อยยี่สิบสาม",
	},
	{
		name:     "111 หนึ่งร้อยสิบเอ็ด",
		input:    "111",
		expected: "หนึ่งร้อยสิบเอ็ด",
	},
	{
		name:     "234983460120 สองแสนสามหมื่นสี่พันเก้าร้อยแปดสิบสามล้านสี่แสนหกหมื่นหนึ่งร้อยยี่สิบ",
		input:    "234983460120",
		expected: "สองแสนสามหมื่นสี่พันเก้าร้อยแปดสิบสามล้านสี่แสนหกหมื่นหนึ่งร้อยยี่สิบ",
	},
	{
		name:     "1021 หนึ่งพันยี่สิบเอ็ด",
		input:    "1021",
		expected: "หนึ่งพันยี่สิบเอ็ด",
	},
	{
		name:     "2022 สองพันยี่สิบสอง",
		input:    "2022",
		expected: "สองพันยี่สิบสอง",
	},
	{
		name:     "-1 ",
		input:    "-1",
		expected: "",
	},
	{
		name:     "123abc ",
		input:    "123abc",
		expected: "",
	},
	{
		name:     "  ",
		input:    "",
		expected: "",
	},
	{
		name:     "   ",
		input:    " ",
		expected: "",
	},
	{
		name:     "0 ",
		input:    "0",
		expected: "",
	},
}

func TestFrom(t *testing.T) {
	for _, test := range testCases {
		input := test.input
		expected := test.expected
		actual := From(input)
		// fmt.Printf("Input = %v | Expected = %v | Actual = %v\n", input, expected, actual)
		// fmt.Printf("IS EQUAL = %v\n", expected == actual)
		assert.Equal(t, expected, actual)
	}
}
